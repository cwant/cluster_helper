#!/usr/bin/env ruby

require_relative '../lib/cluster_helper'
require_relative '../lib/cluster_helper/monkey_patch/hash_stringify_keys'
require 'readline'

class JobConsole < ClusterHelper::BaseReportProgram

  ACCOUNT_COMMANDS = ['account', 'accounts', 'a'].freeze
  JOB_COMMANDS = ['job', 'jobs', 'j'].freeze
  RELOAD_COMMANDS = ['reload', 'r'].freeze
  QUIT_COMMANDS = ['quit', 'exit', 'q'].freeze
  HELP_COMMANDS = ['help', 'h', '?'].freeze
  COMMANDS = (ACCOUNT_COMMANDS +
              JOB_COMMANDS +
              RELOAD_COMMANDS +
              QUIT_COMMANDS +
              HELP_COMMANDS +
              ['user']).freeze

  config_option :user
  config_option :json
  config_option :compact_json
  config_option :yaml

  config_option :command

  private

  def options_command(opts)
    opts.on('-c', '--command COMMAND', 'Run command and exit') do |v|
      @options[:command] = v
    end
  end

  def print_help
    puts 'Some things to try:'
    puts '  jobs'
    puts '  jobs count'
    puts '  job 1112222333'
    puts '  jobs running (or pending, finished, completed, etc)'
    puts '  jobs finished (anything not pending or running)'
    puts '  jobs finished count'
    puts '  accounts'
    puts '  account members'
    puts '  account def-howdy (or just match start of account name)'
    puts '  help'
    puts 'Press Ctrl-D to exit.'
  end
  alias help print_help

  def main
    bnd = binding()
    if @options[:command]
      input_to_commands(@options[:command]).each do |command|
        break unless command
        bnd.eval command
      end
      return
    end

    print_help

    while (input = Readline.readline(prompt, true))
      begin
        input_to_commands(input).each do |command|
          return nil unless command
          bnd.eval command
        end
      rescue UnknownOption
        puts "Bad option (type 'help' for assistance)"
      rescue NameError
        puts "Bad command (type 'help' for assistance)"
      rescue StandardError => e
        puts "Error (#{e.class}) (type 'help' for assistance)"
      end
    end
    puts ''
  end

  def input_to_commands(input)
    input.strip.split(';').map { |i| sanitize_input(i) }
  end

  def sanitize_input(input)
    parts = input.split(' ')
    method = parts[0].strip.downcase
    raise NameError(method) unless COMMANDS.include?(method)
    if method == 'user'
      method = 'switch_user'
    elsif JOB_COMMANDS.include?(method)
      method = 'job'
    elsif ACCOUNT_COMMANDS.include?(method)
      method = 'account'
    elsif RELOAD_COMMANDS.include?(method)
      method = 'reload'
    elsif HELP_COMMANDS.include?(method)
      method = 'help'
    elsif QUIT_COMMANDS.include?(method)
      return nil
    end

    args = parts[1..-1].map { |value| "'#{value}'" }

    "#{method} #{args.join(', ')}"
  end

  def prompt
    "job_console(#{user.username})> "
  end

  def job(*args)
    process_job_command(nil, *args)
  end
  alias jobs job

  def process_job_command(jobs, *args)
    subcommand = args.first

    if ['finished', 'completed'].include?(subcommand)
      return process_finished_job_command(jobs, *args)
    end

    jobs ||= user.active_jobs

    if ['all', nil].include?(subcommand)
      return render('jobs' => jobs.map { |job| job.to_h.stringify_keys })
    end

    return render(count: jobs.count) if subcommand == 'count'

    if ['running', 'pending'].include?(subcommand)
      return process_job_state_command(jobs, *args)
    end

    if ACCOUNT_COMMANDS.include?(subcommand.downcase)
      accounts = jobs.map(&:account).uniq
      return process_account_command(accounts, *args[1..-1])
    end

    job = jobs.find { |j| j.id == subcommand }
    return render('job' => job.to_h.stringify_keys) if job
    raise UnknownOption
  end

  def process_finished_job_command(jobs, *args)
    subcommand = args.first

    if jobs.nil?
      jobs = user.finished_jobs
    else
      job = jobs.first
      jobs = user.finished_jobs if job.nil? || job.active?
    end
    jobs = jobs.select(&:completed?) if subcommand == 'completed'

    process_job_command(jobs, *args[1..-1])
  end

  def process_job_state_command(jobs, *args)
    subcommand = args.first

    if subcommand == 'running'
      jobs = jobs.select(&:running?)
    elsif subcommand == 'pending'
      jobs = jobs.select(&:pending?)
    end
    process_job_command(jobs, *args[1..-1])
  end

  def account(*args)
    process_account_command(user.accounts, *args)
  end
  alias accounts account

  def process_account_command(accounts, *args)
    subcommand = args.first

    if ['name', 'names'].include?(subcommand)
      return render('accounts' => accounts.map(&:name))
    end

    if ['all', nil].include?(subcommand)
      return render('accounts' => accounts.map { |a| a.to_h.stringify_keys })
    end

    if subcommand == 'members'
      return render('accounts' =>
                    accounts.map do |account|
                      { 'name' => account.name,
                        'members' => account.members.map(&:username) }
                    end)
    end

    if JOB_COMMANDS.include?(subcommand.downcase)
      # TODO: try to make this handle multiple accounts
      jobs = ClusterHelper::ActiveJob.where(account: accounts.first)
      return process_job_command(jobs, *args[1..-1])
    end

    accounts = accounts.select { |j| j.name.start_with?(subcommand) }
    return process_account_command(accounts, *args[1..-1]) if accounts

    raise UnknownOption
  end

  def switch_user(username = nil)
    @user = ClusterHelper::User.new(username || @options[:user])
  end

  def reload
    @user.reload
  end

end

JobConsole.new.run if $PROGRAM_NAME == __FILE__
